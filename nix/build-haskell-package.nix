# Like callCabal2nix, but does more:
# - Source filtering (to prevent parent content changes causing rebuilds)
# - Always build from cabal's sdist for release-worthiness
# - Logs what it's doing (based on 'log' option)
#
{ pkgs
, lib
  # 'self' refers to the Haskell package set context.
, self
, log
, ...
}:

let
  mkNewStorePath = name: src:
    # Since 'src' may be a subdirectory of a store path
    # (in string form, which means that it isn't automatically
    # copied), the purpose of cleanSourceWith here is to create a
    # new (smaller) store path that is a copy of 'src' but
    # does not contain the unrelated parent source contents.
    lib.cleanSourceWith {
      name = "${name}";
      inherit src;
    };

  callPackageKeepDeriver = src: args:
    pkgs.haskell.lib.compose.overrideCabal
      (orig: {
        inherit src; # Override original source path to use new
        passthru = orig.passthru or { } // {
          # When using cabal2nix, it is often useful
          # to debug a failure by inspecting the Nix expression
          # generated by cabal2nix. This can be accessed via this
          # cabal2nixDeriver field.
          cabal2nixDeriver = src;
        };
      })
      (self.callPackage src args);
in

name: root:
lib.pipe root
  [
    # Avoid rebuilding because of changes in parent directories
    (mkNewStorePath "source-${name}")
    (x: log.traceDebug "${name}.mkNewStorePath ${x.outPath}" x)

     (root:
        # Check if cached cabal2nix generated nix expression is present,
        # if present use it with callPackage
        # to avoid IFD
        let pkg = 
          if lib.pathExists (lib.concatStringsSep "/" [ root "default.nix" ])
          then 
            (log.traceDebug "${name}.callPackageKeepDeriver ${root}") 
              callPackageKeepDeriver root { }
          else
            (log.traceDebug "${name}.callCabal2nix ${root}")
              self.callCabal2nix name root { };
        in 
          (log.traceDebug "${name}.cabal2nixDeriver ${pkg.cabal2nixDeriver.outPath}" pkg)
     )
  ]
